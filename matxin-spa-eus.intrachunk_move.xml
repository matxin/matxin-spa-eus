<transfer>

  <!-- def!=''/def	type!='adi-kat'/def	overwrite -->
  <def-rule id="ST_IntrachunkMove: def->def" comment="">
    <template match="//CHUNK[@type!='adi-kat' and //NODE[@def!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@def][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
        <if test="$target">
          <attribute name="def"><value-of select="//NODE[@def!='' and count(ancestor::CHUNK)=1]/@def"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- num!=''/num	type!='adi-kat'/num	no-overwrite -->
  <def-rule id="ST_IntrachunkMove: (!='adi-kat') num->num" comment="">
    <template match="//CHUNK[@type!='adi-kat' and not(@num) and //NODE[@num!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@num][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
        <if test="$target">
          <attribute name="num"><value-of select=".//NODE[@num!='' and count(ancestor::CHUNK)=1]/@num"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- per!=''/per	type!='adi-kat'/per	no-overwrite -->
  <def-rule id="ST_IntrachunkMove: (!='adi-kat') per->per" comment="">
    <template match="//CHUNK[@type!='adi-kat' and not(@per) and .//NODE[@per!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@per and count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
        <if test="$target">
          <attribute name="per"><value-of select=".//NODE[@per!='' and count(ancestor::CHUNK)=1]/@per"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- mi='[MG]'/mi	type!='adi-kat'/def	overwrite -->
  <def-rule id="ST_IntrachunkMove: (!='adi-kat' and '[MG]') mi->def" comment="">
    <template match="//CHUNK[@type!='adi-kat' and .//NODE[count(ancestor::CHUNK)=1 and @mi='[MG]']]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@mi][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
         <if test="$target">
          <attribute name="def">[MG]</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- cas!=''/cas	/cas	concat -->
  <def-rule id="ST_IntrachunkMove: cas->.cas" comment="">
    <template match="//CHUNK[.//NODE[@cas!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@cas and count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="cas"><value-of select="concat(@cas, ',' , .//NODE[@cas!='' and count(ancestor::CHUNK)=1]/@cas)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>


  <!-- cas!=''/ref	/casref	concat -->
  <def-rule id="ST_IntrachunkMove: ref->.casref" comment="">
    <template match="//CHUNK[.//NODE[@cas!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]]">
      <copy>
        <attribute name="casref"><value-of select="concat(@casref, ',', .//NODE[@cas!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]/@ref)"/></attribute>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>


  <!-- cas!=''/alloc	/casalloc	concat -->
  <def-rule id="ST_IntrachunkMove: alloc->.casalloc" comment="">
    <template match="//CHUNK[.//NODE[@cas!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]]">
      <copy>
        <attribute name="casalloc"><value-of select="concat(@casalloc, ',', .//NODE[@cas!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]/@alloc)"/></attribute>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- vpost!=''/vpost	/vpost	overwrite -->
  <def-rule id="ST_IntrachunkMove: vpost->vpost" comment="">
    <template match="//CHUNK[.//NODE[@vpost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@vpost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="vpost"><value-of select=".//NODE[@vpost!='' and count(ancestor::CHUNK)=1]/@vpost"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- vpost!=''/ref	/vpostref	overwrite -->
  <def-rule id="ST_IntrachunkMove: ref->vpostref" comment="">
    <template match="//CHUNK[.//NODE[@vpost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@vpost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="vpostref"><value-of select=".//NODE[@vpost!='' and count(ancestor::CHUNK)=1]/@ref"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- vpost!=''/alloc	/vpostalloc	overwrite -->
  <def-rule id="ST_IntrachunkMove: alloc->vpostalloc" comment="">
    <template match="//CHUNK[.//NODE[@vpost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@vpost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="vpostalloc"><value-of select=".//NODE[@vpost!='' and count(ancestor::CHUNK)=1]/@alloc"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- pos='[ADB][ADOGAL]'/'+n[ERL][MEN][MOS]'	type='mend-p'/vpost	overwrite -->
  <!-- %Gehitu: -->
  <!-- %vpost!=''/ref	/vpostref	overwrite -->
  <!-- %vpost!=''/alloc	/vpostalloc	overwrite -->
  <def-rule id="ST_IntrachunkMove: ('+n[ERL][MEN][MOS]' and ADB) +n[ERL][MEN][MOS]->vpost" comment="">
    <template match="//CHUNK[@type='mend-p' and .//NODE[@pos='[ADB][ADOGAL]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@vpost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="vpost">+n[ERL][MEN][MOS]</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- spost!=''/spost	/spost	concat -->
  <def-rule id="ST_IntrachunkMove: spost->.spost" comment="">
    <template match="//CHUNK[.//NODE[@spost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@spost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="spost"><value-of select="concat(@spost, ',', NODE[@spost and count(ancestor::CHUNK)=1]/@spost)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- spost!=''/ref	/spostref	concat -->
  <def-rule id="ST_IntrachunkMove: ref->.spostref" comment="">
    <template match="//CHUNK[.//NODE[@spost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@spost and count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="spostref"><value-of select="concat(@spostref, ',', NODE[@spost!='' and count(ancestor::CHUNK)=1]/@ref)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- spost!=''/alloc	/spostalloc	concat -->
  <def-rule id="ST_IntrachunkMove: alloc->.spostalloc" comment="">
    <template match="//CHUNK[.//NODE[@spost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@spost and count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="spostalloc"><value-of select="concat(@spostalloc, ',', NODE[@spost!='' and count(ancestor::CHUNK)=1]/@alloc)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- npost!=''/npost	/npost	concat -->
  <def-rule id="ST_IntrachunkMove: npost->.npost" comment="">
    <template match="//CHUNK[.//NODE[@npost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@npost and count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="npost"><value-of select="concat(@npost, ',', NODE[@npost!='' and count(ancestor::CHUNK)=1]/@npost)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- npost!=''/ref	/npostref	concat -->
  <def-rule id="ST_IntrachunkMove: ref->.npostref" comment="">
    <template match="//CHUNK[.//NODE[@npost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@npost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="npostref"><value-of select="concat(@npostref, ',', NODE[@npost!='' and count(ancestor::CHUNK)=1]/@ref)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- npost!=''/alloc	/npostalloc	concat -->
  <def-rule id="ST_IntrachunkMove: alloc->.npostalloc" comment="">
    <template match="//CHUNK[.//NODE[@npost!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@npost][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="npostalloc"><value-of select="concat(@npostalloc, ',', NODE[@npost!='' and count(ancestor::CHUNK)=1]/@alloc)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->
 
  <!-- prep!=''/prep	/prep	concat -->
  <def-rule id="ST_IntrachunkMove: prep->.prep" comment="">
    <template match="//CHUNK[.//NODE[@prep!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@prep][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="prep"><value-of select="concat(@prep, ',', NODE[@prep!='' and count(ancestor::CHUNK)=1]/@prep)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- prep!=''/ref	/casref	concat -->
  <def-rule id="ST_IntrachunkMove: ref->.casref" comment="">
    <template match="//CHUNK[.//NODE[@prep!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@prep][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="casref"><value-of select="concat(@casref, ',', NODE[@prep!='' and count(ancestor::CHUNK)=1]/@ref)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- prep!=''/alloc	/casalloc	concat -->
  <def-rule id="ST_IntrachunkMove: alloc->.casalloc" comment="">
    <template match="//CHUNK[.//NODE[@prep!='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@prep][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="casalloc"><value-of select="concat(@casalloc, ',', .//NODE[@prep!=''and count(ancestor::CHUNK)=1]/@alloc)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- lem='' and prep='' and sub='' and cas=''/ref	/casref	concat -->
  <def-rule id="ST_IntrachunkMove: (lem=prep=sub=cas='')ref->.casref" comment="">
    <template match="//CHUNK[.//NODE[@lem='' and @prep='' and @sub='' and @cas='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@lem='' and @prep='' and @sub='' and @cas=''][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="casref"><value-of select="concat(@casref, ',', NODE[@lem='' and @prep='' and @sub='' and @cas='' and count(ancestor::CHUNK)=1]/@ref)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- lem='' and prep='' and sub='' and cas=''/alloc	/casalloc	concat -->
  <def-rule id="ST_IntrachunkMove: (lem=prep=sub=cas='')alloc->.casalloc" comment="">
    <template match="//CHUNK[.//NODE[@lem='' and @prep='' and @sub='' and @cas='' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@lem='' and @prep='' and @sub='' and @cas=''][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="casalloc"><value-of select="concat(@casalloc, ',', NODE[@lem='' and @prep='' and @sub='' and @cas='' and count(ancestor::CHUNK)=1]/@alloc)"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- --> 

  <!-- pos='[Z]'/'[MG]'	/def	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([Z]) '[MG]'->def" comment="">
    <template match="//CHUNK[.//NODE[@pos='[Z]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="def">[MG]</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- pos='[Zu]'/'[MG]'	/def	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([Zu]) '[MG]'->def" comment="">
    <template match="//CHUNK[.//NODE[@pos='[Zu]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="def">[MG]</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- pos='[Zp]'/'[NUMS]'	/def	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([Zp]) '[NUMS]'->def" comment="">
    <template match="//CHUNK[.//NODE[@pos='[Zp]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="def">[NUMS]</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- pos!=''/pos	/headpos	no-overwrite -->
  <def-rule id="ST_IntrachunkMove: pos->headpos" comment="">
    <template match="//CHUNK[not(@headlem) and .//NODE[@pos!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]]">
      <copy>
        <attribute name="headpos"><value-of select=".//NODE[@pos!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]/@pos"/></attribute>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- lem!=''/lem	/headlem	no-overwrite -->
  <def-rule id="ST_IntrachunkMove: lem->headlem" comment="">
    <template match="//CHUNK[not(@headlem) and .//NODE[@lem!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]]">
      <copy>
        <attribute name="headlem"><value-of select=".//NODE[@lem!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]/@lem"/></attribute>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>


  <!-- sem!=''/sem	/headsem	no-overwrite -->
  <def-rule id="ST_IntrachunkMove: sem->headsem" comment="">
    <template match="//CHUNK[not(@headsem) and .//NODE[@sem!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]]">
      <copy>
        <attribute name="headsem"><value-of select=".//NODE[@sem!='' and generate-id(ancestor::CHUNK[1]) = generate-id(current())]/@sem"/></attribute>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>



  <!-- pos='[Z]'/pos	/leafpos	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([Z]) pos->leafpos" comment="">
    <template match="//CHUNK[.//NODE[@pos='[Z]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="leafpos"><value-of select="NODE[@pos='[Z]' and count(ancestor::CHUNK)=1]/@pos"/></attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->  <!-- -->      <!-- -->  <!-- -->  <!-- -->  <!-- -->  <!-- -->  <!-- -->


  <!-- /'true'	si='subj'/subject	overwrite -->
  <def-rule id="ST_IntrachunkMove: (subj) true->subject" comment="">
    <template match="//CHUNK[@si='subj']">
      <copy>
        <attribute name="subject">true</attribute>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- smi='Fit'/'p-int'	/type	overwrite -->
  <def-rule id="ST_IntrachunkMove: (Fit) 'p-int'->type" comment="">
    <template match="//CHUNK[.//NODE[@smi='Fit' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@smi][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="type">p-int</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- smi='Fia'/'p-int'	/type	overwrite -->
  <def-rule id="ST_IntrachunkMove: (Fia) 'p-int'->type" comment="">
    <template match="//CHUNK[.//NODE[@smi='Fia' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@smi][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="type">p-int</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- -->

  <!-- pos='[ADB][ADOGAL]'/'wh'	/qtype	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([ADB][ADOGAL]) 'wh'->qtype" comment="">
    <template match="//CHUNK[.//NODE[@pos='[ADB][ADOGAL]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="qtype">wh</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- pos='[ADB][ALGGAL]'/'wh'	/qtype	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([ADB][ALGGAL]) 'wh'->qtype" comment="">
    <template match="//CHUNK[.//NODE[@pos='[ADB][ALGGAL]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="qtype">wh</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- pos='[IOR][IZGGAL]'/'wh'	/qtype	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([IOR][IZGGAL]) 'wh'->qtype" comment="">
    <template match="//CHUNK[.//NODE[@pos='[IOR][IZGGAL]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="qtype">wh</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- pos='[DET][NOLGAL]'/'wh'	/qtype	overwrite -->
  <def-rule id="ST_IntrachunkMove: ([DET][NOLGAL]) 'wh'->qtype" comment="">
    <template match="//CHUNK[.//NODE[@pos='[DET][NOLGAL]' and count(ancestor::CHUNK)=1]]">
      <variable name="c" select="." /><variable name="target" select="(.//NODE[@pos][count(ancestor::CHUNK[1] | $c) = 1])[1]"/>
      <copy>
       <if test="$target">
        <attribute name="qtype">wh</attribute></if>
        <apply-templates select="@* | *"/>
      </copy>
    </template> 
  </def-rule>

  <!-- Quitar nodos que no tengan lema -->

  <def-rule id="" comment="">
    <template match="//NODE[@lem='']">
        <apply-templates select="*"/>
    </template> 
  </def-rule>

</transfer>
